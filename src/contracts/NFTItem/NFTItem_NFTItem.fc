#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; NFTItem_NFTItem.headers.fc
;;
;; Header files for NFTItem
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $OwnershipAssigned$_store
builder $OwnershipAssigned$_store(builder build_0, (int, slice, slice) v) inline;

;; $OwnershipAssigned$_store_cell
cell $OwnershipAssigned$_store_cell((int, slice, slice) v, builder b) inline;

;; $Excesses$_store
builder $Excesses$_store(builder build_0, (int) v) inline;

;; $Excesses$_store_cell
cell $Excesses$_store_cell((int) v, builder b) inline;

;; $ReportStaticData$_store
builder $ReportStaticData$_store(builder build_0, (int, int, slice) v) inline;

;; $ReportStaticData$_store_cell
cell $ReportStaticData$_store_cell((int, int, slice) v, builder b) inline;

;; $NFTItem$_store
builder $NFTItem$_store(builder build_0, (slice, int, slice, cell, int) v) inline;

;; $NFTItem$_load
(slice, ((slice, int, slice, cell, int))) $NFTItem$_load(slice sc_0) inline;

;; $GetNftData$_to_external
(int, int, slice, slice, cell) $GetNftData$_to_external(((int, int, slice, slice, cell)) v) inline;

;; $NFTItem$init$_load
(slice, ((slice, int, slice, cell))) $NFTItem$init$_load(slice sc_0) inline;

;; $NFTItem$_contract_init
(slice, int, slice, cell, int) $NFTItem$_contract_init(slice $collection_address, int $item_index, slice $owner, cell $individual_content) impure inline;

;; $NFTItem$_contract_load
(slice, int, slice, cell, int) $NFTItem$_contract_load() impure inline;

;; $NFTItem$_contract_store
() $NFTItem$_contract_store((slice, int, slice, cell, int) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content
((int, int, slice, slice, cell)) $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content(int $is_initialized, int $index, slice $collection_address, slice $owner_address, cell $individual_content) inline;

;; $NFTItem$_fun_get_nft_data
((slice, int, slice, cell, int), (int, int, slice, slice, cell)) $NFTItem$_fun_get_nft_data((slice, int, slice, cell, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $Excesses$_constructor_query_id
((int)) $Excesses$_constructor_query_id(int $query_id) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline;

;; $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload
((int, slice, slice)) $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload(int $query_id, slice $prev_owner, slice $forward_payload) inline;

;; $ReportStaticData$_constructor_query_id_index_id_collection
((int, int, slice)) $ReportStaticData$_constructor_query_id_index_id_collection(int $query_id, int $index_id, slice $collection) inline;


;; NFTItem_NFTItem.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(begin_cell());
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

int $global_min(int $x, int $y) impure asm """
    MIN
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

slice $Int$_fun_toString(int $self) impure asm """
    <{
        // x
        NEWC // x b
        OVER // x b x
        0 LESSINT // x b <0?
        <{
            // x b
            45 PUSHINT // x b 45
            SWAP // x 45 b
            8 STU // x b
            SWAP // b x
            NEGATE // b -x
            SWAP // -x b
        }>CONT IF
        // x b

        SWAP // b x

        <{
            // b x
            10 PUSHINT DIVMOD // b x/10 x%10
            48 ADDCONST // b x/10 (x%10+48)
            s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
        }>CONT UNTIL
        // ... b x

        DROP // ... b
        DEPTH DEC // ... b n
        <{ 8 STU }>CONT REPEAT // b
    }>CONT 1 1 CALLXARGS
    // b

    ENDC CTOS // s
""";

slice $Slice$_fun_asString(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure asm """
    LDMSGADDR   // load dest:MsgAddressInt
    LDGRAMS     // load value:CurrencyCollection
    ONE
    SDSKIPFIRST // skip extra currency collection
    LDGRAMS     // load ihr_fee
    LDGRAMS     // load fwd_fee, we'll be using this!
    DROP        // drop remaining Slice (with created_lt and created_at)

    // There are 7 entries on the stack — first 3 fields of Context plus 4 loaded ones.
    // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
    6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context

    ZERO              // not masterchain
    GETORIGINALFWDFEE // floor(fwd_fee * 2^16 / (2^16 - first_frac)), where
                      // first_frac is a value listed in config param 25
                      // of the blockchain: https://tonviewer.com/config#25
                      // this instruction effectively multiplies the fwd_fee by 1.5,
                      // at least for the current value of first_frac, which is 21845
""";

;; NFTItem_NFTItem.constants.fc
;; String ".json"
slice __gen_slice_string_2f62f0bd20aef2d2b17f109c6aba1bc3dd7a55db89e349f2659bf698f80ce9c6() asm """
    B{b5ee9c7241010101000700000a2e6a736f6e9bc05ee0} B>boc <s PUSHSLICE
""";

;; EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c
slice __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c() asm """
    B{b5ee9c72410101010024000043800000000000000000000000000000000000000000000000000000000000000000104aec829d} B>boc <s PUSHSLICE
""";

;; NFTItem_NFTItem.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, true);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, $bounce);
}

;;
;; Type: GetNftData
;; TLB: _ is_initialized:bool index:int257 collection_address:address owner_address:address individual_content:^cell = GetNftData
;;

(int, int, slice, slice, cell) $GetNftData$_to_external(((int, int, slice, slice, cell)) v) inline {
    var (v'is_initialized, v'index, v'collection_address, v'owner_address, v'individual_content) = v; 
    return (v'is_initialized, v'index, v'collection_address, v'owner_address, v'individual_content);
}

((int, int, slice, slice, cell)) $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content(int $is_initialized, int $index, slice $collection_address, slice $owner_address, cell $individual_content) inline {
    return ($is_initialized, $index, $collection_address, $owner_address, $individual_content);
}

;;
;; Type: OwnershipAssigned
;; Header: 0x05138d91
;; TLB: ownership_assigned#05138d91 query_id:uint64 prev_owner:address forward_payload:remainder<slice> = OwnershipAssigned
;;

builder $OwnershipAssigned$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'query_id, v'prev_owner, v'forward_payload) = v;
    build_0 = store_uint(build_0, 85167505, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_slice(v'prev_owner);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $OwnershipAssigned$_store_cell((int, slice, slice) v, builder b) inline {
    return $OwnershipAssigned$_store(b, v).end_cell();
}

((int, slice, slice)) $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload(int $query_id, slice $prev_owner, slice $forward_payload) inline {
    return ($query_id, $prev_owner, $forward_payload);
}

;;
;; Type: Excesses
;; Header: 0xd53276db
;; TLB: excesses#d53276db query_id:uint64 = Excesses
;;

builder $Excesses$_store(builder build_0, (int) v) inline {
    var (v'query_id) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    return build_0;
}

cell $Excesses$_store_cell((int) v, builder b) inline {
    return $Excesses$_store(b, v).end_cell();
}

((int)) $Excesses$_constructor_query_id(int $query_id) inline {
    return ($query_id);
}

;;
;; Type: ReportStaticData
;; Header: 0x8b771735
;; TLB: report_static_data#8b771735 query_id:uint64 index_id:int257 collection:address = ReportStaticData
;;

builder $ReportStaticData$_store(builder build_0, (int, int, slice) v) inline {
    var (v'query_id, v'index_id, v'collection) = v;
    build_0 = store_uint(build_0, 2339837749, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_int(v'index_id, 257);
    build_0 = build_0.store_slice(v'collection);
    return build_0;
}

cell $ReportStaticData$_store_cell((int, int, slice) v, builder b) inline {
    return $ReportStaticData$_store(b, v).end_cell();
}

((int, int, slice)) $ReportStaticData$_constructor_query_id_index_id_collection(int $query_id, int $index_id, slice $collection) inline {
    return ($query_id, $index_id, $collection);
}

;;
;; Type: NFTItem
;; TLB: _ collection_address:address item_index:int257 owner:address individual_content:^cell is_initialized:bool = NFTItem
;;

builder $NFTItem$_store(builder build_0, (slice, int, slice, cell, int) v) inline {
    var (v'collection_address, v'item_index, v'owner, v'individual_content, v'is_initialized) = v;
    build_0 = build_0.store_slice(v'collection_address);
    build_0 = build_0.store_int(v'item_index, 257);
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_ref(v'individual_content);
    build_0 = build_0.store_int(v'is_initialized, 1);
    return build_0;
}

(slice, ((slice, int, slice, cell, int))) $NFTItem$_load(slice sc_0) inline {
    var v'collection_address = sc_0~load_msg_addr();
    var v'item_index = sc_0~load_int(257);
    var v'owner = sc_0~load_msg_addr();
    var v'individual_content = sc_0~load_ref();
    var v'is_initialized = sc_0~load_int(1);
    return (sc_0, (v'collection_address, v'item_index, v'owner, v'individual_content, v'is_initialized));
}

(slice, ((slice, int, slice, cell))) $NFTItem$init$_load(slice sc_0) inline {
    var v'collection_address = sc_0~load_msg_addr();
    var v'item_index = sc_0~load_int(257);
    var v'owner = sc_0~load_msg_addr();
    var v'individual_content = sc_0~load_ref();
    return (sc_0, (v'collection_address, v'item_index, v'owner, v'individual_content));
}

(slice, int, slice, cell, int) $NFTItem$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NFTItem$_load();
    }
    else {
        (slice $collection_address, int $item_index, slice $owner, cell $individual_content) = $sc~$NFTItem$init$_load();
        $sc.end_parse();
        return $NFTItem$_contract_init($collection_address, $item_index, $owner, $individual_content);
    }
}

() $NFTItem$_contract_store((slice, int, slice, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $NFTItem$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract NFTItem functions
;;

(slice, int, slice, cell, int) $NFTItem$_contract_init(slice $collection_address, int $item_index, slice $owner, cell $individual_content) impure inline {
    var (($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized)) = (null(), null(), null(), null(), null());
    $self'collection_address = $collection_address;
    $self'item_index = $item_index;
    $self'owner = $collection_address;
    $self'individual_content = $individual_content;
    $self'is_initialized = false;
    return ($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized);
}

((slice, int, slice, cell, int), (int, int, slice, slice, cell)) $NFTItem$_fun_get_nft_data((slice, int, slice, cell, int) $self) impure inline_ref {
    var (($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized)) = $self;
    tuple $b = __tact_string_builder_start_string();
    slice $collectionData = $Slice$_fun_asString($Cell$_fun_asSlice($self'individual_content));
    $b~__tact_string_builder_append($collectionData);
    $b~__tact_string_builder_append($Int$_fun_toString($self'item_index));
    $b~__tact_string_builder_append(__gen_slice_string_2f62f0bd20aef2d2b17f109c6aba1bc3dd7a55db89e349f2659bf698f80ce9c6());
    var $fresh$ret_12 = $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content($self'is_initialized, $self'item_index, $self'collection_address, $self'owner, __tact_string_builder_end($b));
    return (($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized), $fresh$ret_12);
}

;;
;; Get methods of a Contract NFTItem
;;

_ %get_nft_data() method_id(102351) {
    var self = $NFTItem$_contract_load();
    var res = self~$NFTItem$_fun_get_nft_data();
    return $GetNftData$_to_external(res);
}

;;
;; Routing of a Contract NFTItem
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized) = $NFTItem$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var op = in_msg~load_opcode_internal();
    ;; Receive Transfer message
    if (op == 0x5fcc3d14) {
        var $msg'query_id = in_msg~load_uint(64);
        var $msg'new_owner = in_msg~load_msg_addr();
        var $msg'response_destination = in_msg~load_msg_addr();
        var $msg'custom_payload = in_msg~load_maybe_ref();
        var $msg'forward_amount = in_msg~load_varuint16();
        var $msg'forward_payload = in_msg;
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $msgValue = $ctx'value;
        int $tonBalanceBeforeMsg = ($global_myBalance() - $msgValue);
        int $storageFee = (30000000 - $global_min($tonBalanceBeforeMsg, 30000000));
        $msgValue = ($msgValue - ($storageFee + 30000000));
        throw_unless(49280, ( equal_slices_bits($ctx'sender, $self'owner) ));
        if (($self'is_initialized == false)) {
            $self'is_initialized = true;
            $self'owner = $msg'new_owner;
            $global_send($SendParameters$_constructor_to_value_mode_body($msg'response_destination, 0, 66, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id), begin_cell())));
        } else {
            $self'owner = $msg'new_owner;
            if (($msg'forward_amount > 0)) {
                $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'new_owner, $msg'forward_amount, 2, false, $OwnershipAssigned$_store_cell($OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload($msg'query_id, $ctx'sender, $msg'forward_payload), begin_cell())));
            }
            $msgValue = ($msgValue - $Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw)));
            if (( ~ equal_slices_bits($msg'response_destination, __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c()) )) {
                $global_send($SendParameters$_constructor_to_value_mode_body($msg'response_destination, ($msgValue - $msg'forward_amount), 1, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id), begin_cell())));
            }
        }
        $NFTItem$_contract_store(($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized));
        return ();
    }
    
    ;; Receive GetStaticData message
    if (op == 0x2fcb26a2) {
        var $msg'query_id = in_msg~load_uint(64);
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($ctx'sender, 0, 64, true, $ReportStaticData$_store_cell($ReportStaticData$_constructor_query_id_index_id_collection($msg'query_id, $self'item_index, $self'collection_address), begin_cell())));
        $NFTItem$_contract_store(($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized));
        return ();
    }
    
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}