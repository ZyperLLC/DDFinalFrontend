// automatically generated from `@stdlib/std/stdlib.fc` `C:/Users/saksh/OneDrive/Desktop/Projects/Blockchain/vibe_ton/session-3/build/NFTItem/NFTItem_NFTItem.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_string_builder_start
  DECLPROC __tact_string_builder_start_string
  DECLPROC __tact_string_builder_end
  DECLPROC __tact_string_builder_append
  DECLPROC $OwnershipAssigned$_store
  DECLPROC $OwnershipAssigned$_store_cell
  DECLPROC $Excesses$_store
  DECLPROC $Excesses$_store_cell
  DECLPROC $ReportStaticData$_store
  DECLPROC $ReportStaticData$_store_cell
  DECLPROC $NFTItem$_store
  DECLPROC $NFTItem$_load
  DECLPROC $GetNftData$_to_external
  DECLPROC $NFTItem$init$_load
  DECLPROC $NFTItem$_contract_init
  DECLPROC $NFTItem$_contract_load
  DECLPROC $NFTItem$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content
  DECLPROC $NFTItem$_fun_get_nft_data
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  DECLPROC $Excesses$_constructor_query_id
  DECLPROC $SendParameters$_constructor_to_value_mode_bounce_body
  DECLPROC $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload
  DECLPROC $ReportStaticData$_constructor_query_id_index_id_collection
  102351 DECLMETHOD %get_nft_data
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_string_builder_start PROCINLINE:<{
    NIL
    SWAP
    TPUSH
    PUSHNULL
    TPUSH
  }>
  __tact_string_builder_start_string PROCINLINE:<{
    NEWC
    __tact_string_builder_start INLINECALLDICT
  }>
  __tact_string_builder_end PROCINLINE:<{
    UNCONS
    SWAP
    ENDC
    WHILE:<{
      OVER
      ISNULL
      NOT
    }>DO<{
      SWAP
      UNCONS
      -ROT
      STREF
      ENDC
    }>
    NIP
  }>
  __tact_string_builder_append PROCREF:<{
    DUP
    SREFS
    OVER
    SBITS
    WHILE:<{
      DUP
      0 GTINT
      s2 PUSH
      0 GTINT
      OR
    }>DO<{
      s0 s3 XCHG
      UNCONS
      127 PUSHINT
      s2 PUSH
      BBITS
      3 RSHIFT#
      SUB
      s0 s5 XCHG
      3 RSHIFT#
      s5 s5 XCPU
      MIN
      DUP
      0 GTINT
      IF:<{
        DUP
        3 LSHIFT#
        s1 s5 XCHG
        LDSLICEX
        s0 s3 XCHG
        STSLICE
        s0 s1 s4 XCHG3
      }>
      -ROT
      CONS
      s4 s1 PUSH2
      SUB
      0 GTINT
      IF:<{
        NEWC
        SWAP
        CONS
        s4 s4 XCHG2
        SUB
        3 LSHIFT#
      }>ELSE<{
        NIP
        s3 POP
        0 GTINT
        IF:<{
          LDREF
          DROP
          CTOS
          DUP
          SREFS
          OVER
          SBITS
        }>ELSE<{
          0 PUSHINT
          DUP
        }>
      }>
    }>
    3 BLKDROP
  }>
  $OwnershipAssigned$_store PROCINLINE:<{
    85167505 PUSHINT
    s0 s4 XCHG2
    32 STU
    s1 s2 XCHG
    64 STU
    STSLICE
    STSLICE
  }>
  $OwnershipAssigned$_store_cell PROCINLINE:<{
    3 -ROLL
    $OwnershipAssigned$_store INLINECALLDICT
    ENDC
  }>
  $Excesses$_store PROCINLINE:<{
    3576854235 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $Excesses$_store_cell PROCINLINE:<{
    SWAP
    $Excesses$_store INLINECALLDICT
    ENDC
  }>
  $ReportStaticData$_store PROCINLINE:<{
    2339837749 PUSHINT
    s0 s4 XCHG2
    32 STU
    s1 s2 XCHG
    64 STU
    257 PUSHINT
    STIX
    STSLICE
  }>
  $ReportStaticData$_store_cell PROCINLINE:<{
    3 -ROLL
    $ReportStaticData$_store INLINECALLDICT
    ENDC
  }>
  $NFTItem$_store PROCINLINE:<{
    s4 s5 XCHG2
    STSLICE
    s1 s2 XCHG
    257 PUSHINT
    STIX
    STSLICE
    STREF
    1 STI
  }>
  $NFTItem$_load PROCINLINE:<{
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDMSGADDR
    LDREF
    1 LDI
    5 -ROLL
  }>
  $GetNftData$_to_external PROCINLINE:<{
  }>
  $NFTItem$init$_load PROCINLINE:<{
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDMSGADDR
    LDREF
    4 -ROLL
  }>
  $NFTItem$_contract_init PROCINLINE:<{
    NIP
    s2 s(-1) PUXC
    FALSE
  }>
  $NFTItem$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $NFTItem$_load INLINECALLDICT
      1 5 BLKDROP2
    }>ELSE<{
      $NFTItem$init$_load INLINECALLDICT
      s0 s4 XCHG
      ENDS
      3 ROLL
      $NFTItem$_contract_init INLINECALLDICT
    }>
  }>
  $NFTItem$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    5 -ROLL
    $NFTItem$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content PROCINLINE:<{
  }>
  $NFTItem$_fun_get_nft_data PROCREF:<{
    __tact_string_builder_start_string INLINECALLDICT
    s2 PUSH
    $Cell$_fun_asSlice INLINECALLDICT
    __tact_string_builder_append INLINECALLDICT
    s4 PUSH
        <{
            // x
            NEWC // x b
            OVER // x b x
            0 LESSINT // x b <0?
            <{
                // x b
                45 PUSHINT // x b 45
                SWAP // x 45 b
                8 STU // x b
                SWAP // b x
                NEGATE // b -x
                SWAP // -x b
            }>CONT IF
            // x b
            SWAP // b x
            <{
                // b x
                10 PUSHINT DIVMOD // b x/10 x%10
                48 ADDCONST // b x/10 (x%10+48)
                s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
            }>CONT UNTIL
            // ... b x
            DROP // ... b
            DEPTH DEC // ... b n
            <{ 8 STU }>CONT REPEAT // b
        }>CONT 1 1 CALLXARGS
        // b
        ENDC CTOS // s
    __tact_string_builder_append INLINECALLDICT
        B{b5ee9c7241010101000700000a2e6a736f6e9bc05ee0} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end INLINECALLDICT
    s1 s4 s(-2) PU2XC
    s7 s5 s(-2) PU2XC
    $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content INLINECALLDICT
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  $Excesses$_constructor_query_id PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_mode_bounce_body PROCINLINE:<{
    s2 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s0 s3 XCHG
  }>
  $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload PROCINLINE:<{
  }>
  $ReportStaticData$_constructor_query_id_index_id_collection PROCINLINE:<{
  }>
  %get_nft_data PROC:<{
    $NFTItem$_contract_load INLINECALLDICT
    $NFTItem$_fun_get_nft_data INLINECALLDICT
    5 5 BLKDROP2
    $GetNftData$_to_external INLINECALLDICT
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $NFTItem$_contract_load INLINECALLDICT
    s0 s6 XCHG
    IFJMP:<{
      6 BLKDROP
    }>
    s0 s4 XCHG
    32 LDUQ 130 THROWIFNOT
    OVER
    1607220500 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      64 LDU
      LDMSGADDR
      LDMSGADDR
      LDOPTREF
      NIP
      LDVARUINT16
      __tact_context_get INLINECALLDICT
      OVER
          BALANCE FIRST
      OVER
      SUB
      30000000 PUSHINT
      TUCK
          MIN
      SUB
      30000000 PUSHINT
      ADD
      SUB
      s3 PUSH
      49280 PUSHINT
      s0 s12 XCHG
      SDEQ
      s1 s11 XCHG
      THROWANYIFNOT
      s13 PUSH
      0 EQINT
      IF:<{
        6 BLKDROP
        s3 POP
        s6 POP
        TRUE
        0 PUSHINT
        66 PUSHINT
        s0 s3 XCHG
        $Excesses$_constructor_query_id INLINECALLDICT
        NEWC
        $Excesses$_store_cell INLINECALLDICT
        s3 s4 XCHG
        s1 s4 s0 XCHG3
        $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        s7 s5 PUSH2
        0 GTINT
        IF:<{
          2 PUSHINT
          s10 s4 PUSH2
          FALSE
          s0 s9 XCHG
          $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload INLINECALLDICT
          NEWC
          $OwnershipAssigned$_store_cell INLINECALLDICT
          s8 PUSH
          s4 s11 XCHG
          s0 s3 XCHG
          s8 s8 XCHG2
          $SendParameters$_constructor_to_value_mode_bounce_body INLINECALLDICT
              NEWC
              b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
              1 STI               // store `bounce`
              b{000} STSLICECONST // store bounced = false and src = addr_none
              STSLICE             // store `to`
              SWAP
              STGRAMS             // store `value`
              105 PUSHINT         // 1 + 4 + 4 + 64 + 32
              STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
              // → Stack state
              // s0: Builder
              // s1: `data`
              // s2: `code`
              // s3: `body`
              // s4: `mode`
              // Group 2: Placing the Builder after code and data, then checking those for nullability
              s2 XCHG0
              DUP2
              ISNULL
              SWAP
              ISNULL
              AND
              // → Stack state
              // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
              // s1: `code`
              // s2: `data`
              // s3: Builder
              // s4: `body`
              // s5: `mode`
              // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
              <{
                  DROP2 // drop `data` and `code`, since either of those is null
                  b{0} STSLICECONST
              }> PUSHCONT
              // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
              <{
                  // _ split_depth:(Maybe (## 5))
                  //   special:(Maybe TickTock)
                  //   code:(Maybe ^Cell)
                  //   data:(Maybe ^Cell)
                  //   library:(Maybe ^Cell)
                  // = StateInit;
                  ROT                // place message Builder on top
                  b{10} STSLICECONST // store Maybe = true, Either = false
                  // Start composing inlined StateInit
                  b{00} STSLICECONST // store split_depth and special first
                  STDICT             // store code
                  STDICT             // store data
                  b{0} STSLICECONST  // store library
              }> PUSHCONT
              // Group 3: IFELSE that does the branching shown above
              IFELSE
              // → Stack state
              // s0: Builder
              // s1: null or StateInit
              // s2: `body`
              // s3: `mode`
              // Group 4: Finalizing the message
              STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
              ENDC
              // → Stack state
              // s0: Cell
              // s1: `mode`
              // Group 5: Sending the message, with `mode` on top
              SWAP
              SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        }>ELSE<{
          s5 POP
          s7 POP
        }>
        3 ROLL
        s0 s6 XCHG
            LDMSGADDR   // load dest:MsgAddressInt
            LDGRAMS     // load value:CurrencyCollection
            ONE
            SDSKIPFIRST // skip extra currency collection
            LDGRAMS     // load ihr_fee
            LDGRAMS     // load fwd_fee, we'll be using this!
            DROP        // drop remaining Slice (with created_lt and created_at)
            // There are 7 entries on the stack — first 3 fields of Context plus 4 loaded ones.
            // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
            6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context
            ZERO              // not masterchain
            GETORIGINALFWDFEE // floor(fwd_fee * 2^16 / (2^16 - first_frac)), where
                              // first_frac is a value listed in config param 25
                              // of the blockchain: https://tonviewer.com/config#25
                              // this instruction effectively multiplies the fwd_fee by 1.5,
                              // at least for the current value of first_frac, which is 21845
        s1 s5 XCHG
        SUB
            B{b5ee9c72410101010024000043800000000000000000000000000000000000000000000000000000000000000000104aec829d} B>boc <s PUSHSLICE
        s2 s(-1) PUXC
        SDEQ
        NOT
        IF:<{
          s0 s4 XCHG2
          SUB
          1 PUSHINT
          s0 s3 XCHG
          $Excesses$_constructor_query_id INLINECALLDICT
          NEWC
          $Excesses$_store_cell INLINECALLDICT
          s3 s4 XCHG
          s1 s4 s0 XCHG3
          $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
              NEWC
              b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
              1 STI               // store `bounce`
              b{000} STSLICECONST // store bounced = false and src = addr_none
              STSLICE             // store `to`
              SWAP
              STGRAMS             // store `value`
              105 PUSHINT         // 1 + 4 + 4 + 64 + 32
              STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
              // → Stack state
              // s0: Builder
              // s1: `data`
              // s2: `code`
              // s3: `body`
              // s4: `mode`
              // Group 2: Placing the Builder after code and data, then checking those for nullability
              s2 XCHG0
              DUP2
              ISNULL
              SWAP
              ISNULL
              AND
              // → Stack state
              // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
              // s1: `code`
              // s2: `data`
              // s3: Builder
              // s4: `body`
              // s5: `mode`
              // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
              <{
                  DROP2 // drop `data` and `code`, since either of those is null
                  b{0} STSLICECONST
              }> PUSHCONT
              // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
              <{
                  // _ split_depth:(Maybe (## 5))
                  //   special:(Maybe TickTock)
                  //   code:(Maybe ^Cell)
                  //   data:(Maybe ^Cell)
                  //   library:(Maybe ^Cell)
                  // = StateInit;
                  ROT                // place message Builder on top
                  b{10} STSLICECONST // store Maybe = true, Either = false
                  // Start composing inlined StateInit
                  b{00} STSLICECONST // store split_depth and special first
                  STDICT             // store code
                  STDICT             // store data
                  b{0} STSLICECONST  // store library
              }> PUSHCONT
              // Group 3: IFELSE that does the branching shown above
              IFELSE
              // → Stack state
              // s0: Builder
              // s1: null or StateInit
              // s2: `body`
              // s3: `mode`
              // Group 4: Finalizing the message
              STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
              ENDC
              // → Stack state
              // s0: Cell
              // s1: `mode`
              // Group 5: Sending the message, with `mode` on top
              SWAP
              SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        }>ELSE<{
          s2 s4 XCHG
          4 BLKDROP
        }>
        s0 s4 XCHG
      }>
      s4 s3 s0 XCHG3
      $NFTItem$_contract_store INLINECALLDICT
    }>
    SWAP
    801842850 PUSHINT
    EQUAL
    IFJMP:<{
      64 LDU
      DROP
      __tact_context_get INLINECALLDICT
      s2 s3 XCHG
      3 BLKDROP
      0 PUSHINT
      64 PUSHINT
      TRUE
      s4 s6 s7 XCPU2
      $ReportStaticData$_constructor_query_id_index_id_collection INLINECALLDICT
      NEWC
      $ReportStaticData$_store_cell INLINECALLDICT
      s3 s4 XCHG
      s1 s3 s0 XCHG3
      $SendParameters$_constructor_to_value_mode_bounce_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s0 s3 s4 XCHG3
      $NFTItem$_contract_store INLINECALLDICT
    }>
    6 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
