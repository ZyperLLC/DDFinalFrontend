#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; BetGame_BetGame.headers.fc
;;
;; Header files for BetGame
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_min_int_cell
(int, cell, int) __tact_dict_min_int_cell(cell d, int kl) inline;

;; __tact_dict_next_int_cell
(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v, builder b) inline;

;; $Bet$_load
(slice, ((slice, int, int))) $Bet$_load(slice sc_0) inline;

;; $Bet$_as_optional
tuple $Bet$_as_optional((slice, int, int) v) inline;

;; $Bet$_load_opt
tuple $Bet$_load_opt(cell cl) inline;

;; $BetGame$_store
builder $BetGame$_store(builder build_0, (slice, int, int) v) inline;

;; $BetGame$_load
(slice, ((slice, int, int))) $BetGame$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Bet$_not_null
((slice, int, int)) $Bet$_not_null(tuple v) inline;

;; $BetGame$_contract_load
(slice, int, int) $BetGame$_contract_load() impure inline;

;; $BetGame$_contract_store
() $BetGame$_contract_store((slice, int, int) v) impure inline;

;; $BetGame$_fun_bettingRound
((slice, int, int), int) $BetGame$_fun_bettingRound((slice, int, int) $self) impure inline_ref;

;; $BetGame$_fun_contractBalance
((slice, int, int), int) $BetGame$_fun_contractBalance((slice, int, int) $self) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $BetGame$_fun_reply
((slice, int, int), ()) $BetGame$_fun_reply((slice, int, int) $self, cell $body) impure inline;

;; $BetGame$_fun_requireOwner
((slice, int, int), ()) $BetGame$_fun_requireOwner((slice, int, int) $self) impure inline_ref;

;; $BetGame$_fun_owner
((slice, int, int), slice) $BetGame$_fun_owner((slice, int, int) $self) impure inline_ref;

;; $MessageParameters$_constructor_to_value_mode_bounce
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_bounce(slice $to, int $value, int $mode, int $bounce) inline;

;; $MessageParameters$_constructor_to_value_mode_body_bounce
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body_bounce(slice $to, int $value, int $mode, cell $body, int $bounce) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;


;; BetGame_BetGame.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v) asm """
    3 TUPLE
""";

forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v) asm """
    3 UNTUPLE
""";

(int, cell, int) __tact_dict_min_int_cell(cell d, int kl) inline {
    var (key, value, flag) = idict_get_min_ref?(d, kl);
    if (flag) {
        return (key, value, flag);
    } else {
        return (null(), null(), flag);
    }
}

(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot) inline {
    var (key, value, flag) = idict_get_next?(d, kl, pivot);
    if (flag) {
        return (key, value~load_ref(), flag);
    } else {
        return (null(), null(), flag);
    }
}

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // â†’ Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_cashback(slice $to) impure asm """
    NEWC
    x{42_} STSLICECONST // .storeUint(0x10, 6)
    STSLICE          // .storeAddress(to)
    0 PUSHINT        // 0
    111 STUR         // .storeUint(0, 111)
                     // 4 zeros for coins and 107 zeros for lt, fees, etc.
    ENDC
    66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
    SENDRAWMSG
""";

((slice, int, int), ()) $BetGame$_fun_reply((slice, int, int) $self, cell $body) impure inline {
    var (($self'owner, $self'bettingStarted, $self'bettingRound)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = true;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'owner, $self'bettingStarted, $self'bettingRound), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'owner, $self'bettingStarted, $self'bettingRound), ());
}

((slice, int, int), ()) $BetGame$_fun_requireOwner((slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bettingStarted, $self'bettingRound)) = $self;
    throw_unless(132, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
    return (($self'owner, $self'bettingStarted, $self'bettingRound), ());
}

((slice, int, int), slice) $BetGame$_fun_owner((slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bettingStarted, $self'bettingRound)) = $self;
    var $fresh$ret_2 = $self'owner;
    return (($self'owner, $self'bettingStarted, $self'bettingRound), $fresh$ret_2);
}

;; BetGame_BetGame.constants.fc
;; Cell IthwpY4ccZ5mUhDLogjYfHZA5ZNGqRyWEru8QeyO/Pk=
cell __gen_cell_cell_22d870a58e1c719e665210cba208d87c7640e59346a91c9612bbbc41ec8efcf9() asm """
    B{b5ee9c7241010101000e000018000000007374617274626574625e5c81} B>boc PUSHREF
""";

;; BetGame_BetGame.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_bounce(slice $to, int $value, int $mode, int $bounce) inline {
    return ($mode, null(), $value, $to, $bounce);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body_bounce(slice $to, int $value, int $mode, cell $body, int $bounce) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_slice(v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v, builder b) inline {
    return $ChangeOwnerOk$_store(b, v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline {
    return ($queryId, $newOwner);
}

;;
;; Type: Bet
;; TLB: _ player:address hasNFT:bool amountBet:coins = Bet
;;

(slice, ((slice, int, int))) $Bet$_load(slice sc_0) inline {
    var v'player = sc_0~load_msg_addr();
    var v'hasNFT = sc_0~load_int(1);
    var v'amountBet = sc_0~load_varuint16();
    return (sc_0, (v'player, v'hasNFT, v'amountBet));
}

tuple $Bet$_as_optional((slice, int, int) v) inline {
    var (v'player, v'hasNFT, v'amountBet) = v;
    return __tact_tuple_create_3(v'player, v'hasNFT, v'amountBet);
}

tuple $Bet$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Bet$_as_optional(sc~$Bet$_load());
}

((slice, int, int)) $Bet$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'player, int vvv'hasNFT, int vvv'amountBet) = __tact_tuple_destroy_3(v);
    return (vvv'player, vvv'hasNFT, vvv'amountBet);
}

;;
;; Type: BetGame
;; TLB: _ owner:address bettingStarted:bool bettingRound:int257 = BetGame
;;

builder $BetGame$_store(builder build_0, (slice, int, int) v) inline {
    var (v'owner, v'bettingStarted, v'bettingRound) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_int(v'bettingStarted, 1);
    build_0 = build_0.store_int(v'bettingRound, 257);
    return build_0;
}

(slice, ((slice, int, int))) $BetGame$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'bettingStarted = sc_0~load_int(1);
    var v'bettingRound = sc_0~load_int(257);
    return (sc_0, (v'owner, v'bettingStarted, v'bettingRound));
}

(slice, int, int) $BetGame$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    return $sc~$BetGame$_load();
}

() $BetGame$_contract_store((slice, int, int) v) impure inline {
    builder b = begin_cell();
    b = $BetGame$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract BetGame functions
;;

((slice, int, int), int) $BetGame$_fun_bettingRound((slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bettingStarted, $self'bettingRound)) = $self;
    var $fresh$ret_0 = $self'bettingRound;
    return (($self'owner, $self'bettingStarted, $self'bettingRound), $fresh$ret_0);
}

((slice, int, int), int) $BetGame$_fun_contractBalance((slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bettingStarted, $self'bettingRound)) = $self;
    var $fresh$ret_1 = $global_myBalance();
    return (($self'owner, $self'bettingStarted, $self'bettingRound), $fresh$ret_1);
}

;;
;; Get methods of a Contract BetGame
;;

_ %bettingRound() method_id(114211) {
    var self = $BetGame$_contract_load();
    var res = self~$BetGame$_fun_bettingRound();
    return res;
}

_ %contractBalance() method_id(110221) {
    var self = $BetGame$_contract_load();
    var res = self~$BetGame$_fun_contractBalance();
    return res;
}

_ %owner() method_id(83229) {
    var self = $BetGame$_contract_load();
    var res = self~$BetGame$_fun_owner();
    return res;
}

;;
;; Routing of a Contract BetGame
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'bettingStarted, $self'bettingRound) = $BetGame$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive EndBetting message
        if (op == 1448266692) {
            var $msg'tonWinningBets = in_msg~load_dict();
            ($self'owner, $self'bettingStarted, $self'bettingRound)~$BetGame$_fun_requireOwner();
            cell $winnerMap = $msg'tonWinningBets;
            var ($key, $value, $fresh$flag_3) = __tact_dict_min_int_cell($winnerMap, 257);
            while ($fresh$flag_3) {
                var ($value'player, $value'hasNFT, $value'amountBet) = $Bet$_not_null($Bet$_load_opt($value));
                int $hasNFT = $value'hasNFT;
                int $amountToSend = ($hasNFT ? (($value'amountBet * 770) / 100) : ($value'amountBet * 7));
                $global_message($MessageParameters$_constructor_to_value_mode_bounce($value'player, $amountToSend, 2, false));
                ($key, $value, $fresh$flag_3) = __tact_dict_next_int_cell($winnerMap, 257, $key);
            }
            $global_message($MessageParameters$_constructor_to_value_mode_body_bounce($global_myAddress(), 0, 64, __gen_cell_cell_22d870a58e1c719e665210cba208d87c7640e59346a91c9612bbbc41ec8efcf9(), false));
            
            return ();
        }
        
        ;; Receive WithdrawTon message
        if (op == 4206811366) {
            var $msg'amount = in_msg~load_varuint16();
            ($self'owner, $self'bettingStarted, $self'bettingRound)~$BetGame$_fun_requireOwner();
            int $amountToWithdraw = $msg'amount;
            $global_message($MessageParameters$_constructor_to_value_mode_bounce($self'owner, $amountToWithdraw, 2, false));
            
            return ();
        }
        
        ;; Receive ChangeOwner message
        if (op == 0x819dbe99) {
            var $msg'queryId = in_msg~load_uint(64);
            var $msg'newOwner = in_msg~load_msg_addr();
            ($self'owner, $self'bettingStarted, $self'bettingRound)~$BetGame$_fun_requireOwner();
            $self'owner = $msg'newOwner;
            ($self'owner, $self'bettingStarted, $self'bettingRound)~$BetGame$_fun_reply($ChangeOwnerOk$_store_cell($ChangeOwnerOk$_constructor_queryId_newOwner($msg'queryId, $msg'newOwner), begin_cell()));
            $BetGame$_contract_store(($self'owner, $self'bettingStarted, $self'bettingRound));
            return ();
        }
        
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $global_cashback(__tact_context_get_sender());
        
        return ();
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "startbet" message
    if (text_op == 0x5838f9565baa189f5d1ec3946b8eccc609bd2bb070777a91ec98b47eecda3767) {
        ($self'owner, $self'bettingStarted, $self'bettingRound)~$BetGame$_fun_requireOwner();
        $self'bettingStarted = true;
        $self'bettingRound = $self'bettingRound + 1;
        $global_cashback(__tact_context_get_sender());
        $BetGame$_contract_store(($self'owner, $self'bettingStarted, $self'bettingRound));
        return ();
    }
    ;; Receive "depositton" message
    if (text_op == 0xa34a48aa7d7a6204cd9791c95cee4318f5d0a056f33d5a2b0ff37a17df527978) {
        
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}